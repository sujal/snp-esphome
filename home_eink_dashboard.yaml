substitutions:
  device_name: "snp-dashboard-1"
  friendly_name: "Dashboard #1"
  run_time: 24h
  sleep_time: 15min # normal sleep time
  night_sleep_time: 8h

globals:
  - id: current_page
    restore_value: yes
    initial_value: "1"
    type: int
  - id: updates_since_refresh
    restore_value: yes
    initial_value: "21"
    type: int
    
esphome:
  name: "${device_name}"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  password: !secret dashboard_1_api_password

ota:
  password: !secret dashboard_1_ota_password

wifi:
  ssid: !secret home_wifi_ssid
  password: !secret home_wifi_password  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dashboard 1 Fallback Hotspot"
    password: !secret dashboard_1_fallback_ap_password

captive_portal:

time:
  - platform: homeassistant
    id: ntp
    on_time_sync:
      - then:
        - component.update: sunrise
        - component.update: sunset

external_components:
  - source:
      type: git
      url: https://github.com/vbaksa/esphome
      ref: dev
    components:
      - lilygo_t5_47_battery 
      - lilygo_t5_47_display
    refresh: 1s
 
sun:
  latitude: 41.75744°
  longitude: -72.75584°
  
font:
  - file: "font/OpenSans/OpenSans-Bold.ttf"
    id: font_name
    size: 38
    glyphs: |-
      !#$"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: "font/OpenSans/OpenSans-Medium.ttf"
    id: font_value
    size: 56    
    glyphs: |-
      £#$!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: "font/OpenSans/OpenSans-Medium.ttf"
    id: font_footer
    size: 28    
    glyphs: |-
      !#$"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: "font/OpenSans/OpenSans-Bold.ttf"
    id: font_calendar_time_label
    size: 24
    glyphs: |-
      !#$"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: "font/OpenSans/OpenSans-Light.ttf"
    id: font_section_title
    size: 30
    glyphs: |-
      !#$"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: "font/OpenSans/OpenSans-Regular.ttf"
    id: font_small_label
    size: 20
    glyphs: |-
      !#$"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: "font/OpenSans/OpenSans-Medium.ttf"
    id: font_small_value
    size: 42
    glyphs: |-
      !#$"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: 'font/MaterialDesign-Webfont-master/fonts/materialdesignicons-webfont.ttf'
    id: weather_font
    size: 160
    glyphs: [
      "\U000F0590",
      "\U000F0F2F",
      "\U000F0591",
      "\U000F0592",
      "\U000F0593",
      "\U000F067E",
      "\U000F0594",
      "\U000F0595",
      "\U000F0596",
      "\U000F0597",
      "\U000F0598",
      "\U000F067F",
      "\U000F0599",
      "\U000F059D",
      "\U000F059E"
    ]
  - file: 'font/MaterialDesign-Webfont-master/fonts/materialdesignicons-webfont.ttf'
    id: font_icons_small
    size: 56
    glyphs:
        - "\U000F02E3" # Bed
        - "\U000F09A1" # Shower
        - "\U000F09A0" # Bath
        - "\U000F1104" # Monitor
        - "\U000F0510" # temp
        - "\U000F059D" # wind
        - "\U000F0813" # btc
        - "\U000F086A" # eth
        - "\U000F116B" # sol
        - "\U000F0A61" # ltc
        - "\U000F0A43" # doge
        - "\U000F0178" # xlm
        - "\U000F0CE1" # up
        - "\U000F0047" # down 
        - "\U000F0FE1" # horizontal
        - "\U000F059B" # sunset
        - "\U000F059C" # sunrise
  - file: 'font/MaterialDesign-Webfont-master/fonts/materialdesignicons-webfont.ttf'
    id: font_icons_smaller
    size: 40
    glyphs:
        - "\U000F0510" # temp
        - "\U000F059D" # wind
        - "\U000F059B" # sunset
        - "\U000F059C" # sunrise

script:
  - id: refresh_display
    then:
      - repeat:
          count: 1
          then:
          - display.page.show: page_black
          - component.update: t5_display
          - display.page.show: page_white
          - component.update: t5_display
      - lambda: id(updates_since_refresh) = 0;
  - id: all_data_received
    then:
      - logger.log: "all_data_received called"
      - script.execute: show_page
      - script.execute: enter_sleep
  - id: show_page
    then:
      - if: 
          condition:
            lambda: return id(updates_since_refresh) >= 20;
          then:
            - script.execute: refresh_display
      - if:
          condition:
            lambda: return id(current_page)==1;
          then:
            - display.page.show: page_temps
          else:
            - display.page.show: page_temps
    
      - component.update: t5_display
      - lambda: |-
          id(updates_since_refresh)++;

  - id: enter_sleep
    then:
      - if:
          condition:
            binary_sensor.is_off: prevent_sleep
          then:
            
            - if:
                condition:
                  lambda: |-
                    if (strlen(id(weather_today_condition).state.c_str())>0 &&
                        id(outdoor_temperature).has_state() &&
                        id(living_room_temp).has_state() &&
                        id(downstairs_temp).has_state() &&
                        id(extension_temp).has_state() &&
                        id(parents_room_temp).has_state() &&
                        id(inr_exchange_rate).has_state()) {
                      return true;
                    }
                    return false;
                then:
                  - logger.log: "All data received. Calculating sleep duration..."
                  - if:
                      condition:
                        lambda: |- 
                          auto time = id(ntp).now();
                          if (!time.is_valid()) { 
                            return false;
                          }
                          return (time.hour < 6) && (time.hour >= 22); 
                      then:
                        - logger.log: "It's nighttime, entering long sleep for ${night_sleep_time}"       
                        - display.page.show: page_sleep
                        - component.update: t5_display
                        - deep_sleep.enter: 
                            id: deep_sleep_1 
                            sleep_duration: ${night_sleep_time}
                      else:
                        - logger.log: "It's daytime, entering short sleep for ${sleep_time}"             
                        - deep_sleep.enter: 
                            id: deep_sleep_1 
                            sleep_duration: ${sleep_time}      
                else:
                  - logger.log: "Staying awake to wait for data..."
          else:
            - logger.log: "Prevent deep sleep enabled."



text_sensor:
  - platform: sun
    id: sunrise
    name: Sun Next Sunrise
    type: sunrise
    format: "%H:%M"
    internal: true
    update_interval: never
  - platform: sun
    id: sunset
    name: Sun Next Sunset
    type: sunset
    format: "%H:%M"    
    internal: true
    update_interval: never
  - platform: version
    hide_timestamp: true
    name: "${friendly_name} ESPHome Version"
    entity_category: diagnostic
  - platform: homeassistant
    id: weather_today_condition
    entity_id: sensor.weather_condition
    internal: true
    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - logger.log: "received value for home weather station condition."
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      icon: mdi:wifi
      entity_category: diagnostic
    ssid:
      name: "${friendly_name} Connected SSID"
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
  - platform: homeassistant
    id: dow_jones_index_quote
    entity_id: sensor.dji_quote_value_display
    on_value:
      then:
        - logger.log: "received Dow Jones Index quote"
  - platform: homeassistant
    id: dow_jones_index_delta
    entity_id: sensor.dji_quote_delta_display
    on_value:
      then:
        - logger.log: "received Dow Jones Index delta"
  - platform: homeassistant
    id: nasdaq_index_quote
    entity_id: sensor.nasdaq_quote_value_display
    on_value:
      then:
        - logger.log: "received NASDAQ index quote"
  - platform: homeassistant
    id: nasdaq_index_delta
    entity_id: sensor.nasdaq_quote_delta_display
    on_value:
      then:
        - logger.log: "received NASDAQ Index delta"
  - platform: homeassistant
    id: disney_stock
    entity_id: sensor.disney_stock_display
    on_value:
      then:
        - logger.log: "received Disney stock quote"
  - platform: homeassistant
    id: next_calendar_item_title
    entity_id: sensor.home_calendar_next_event_title
    on_value:
      then:
        - logger.log: "received calendar title"
  - platform: homeassistant
    id: next_calendar_item_time
    entity_id: sensor.home_calendar_next_event_time_string
    on_value:
      then:
        - logger.log: "received calendar time"


binary_sensor:
  - platform: gpio
    pin: GPIO34
    name: "Temps Page"
    on_press:
      then:
        - lambda: 'id(current_page) = 1;'
  - platform: gpio
    pin: GPIO35
    name: "Clear Screen"
    on_press:
      then:
        - script.execute: refresh_display
  - platform: homeassistant
    id: prevent_sleep
    entity_id: input_boolean.prevent_deep_sleep
    on_state:
      - if:
          condition:
            - binary_sensor.is_on: prevent_sleep
          then:
            - logger.log: "Automatic deep sleep disabled"
            - deep_sleep.prevent: deep_sleep_1

switch:
  - platform: restart
    name: "${friendly_name} Restart"
  - platform: template
    name: "Prevent Deep Sleep"
    lambda: |-
      if (id(prevent_sleep).state) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - lambda: |-
          id(prevent_sleep).publish_state(true);
    turn_off_action:
      - lambda: |-
          id(prevent_sleep).publish_state(true);

sensor:
  - platform: lilygo_t5_47_battery
    id: batt_volt
    voltage:
      name: "Battery Voltage"
  - platform: template
    name: "${friendly_name} Battery"
    id: batt
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    lambda: |-
      int y = (1-(4.1-id(batt_volt).voltage->state)/(4.1-3.3))*100;
      if (y < 100) {return y;} else {return 100;};

  - platform: homeassistant
    id: next_event_on_calendar
    entity_id: calendar.sujal
    internal: true
    on_value:
      then:
        - logger.log: "received calendar for sujal calendar"

  - platform: homeassistant
    id: inr_exchange_rate
    entity_id: sensor.usd_to_inr
    on_value:
      then:
        - logger.log: "received FX info for INR"
  # - platform: homeassistant
  #   id: confluent_stock
  #   entity_id: sensor.stock_quote_confluent
  #   on_value:
  #     then:
  #       - logger.log: "received Confluent stock quote"
  # - platform: homeassistant
  #   id: apple_stock
  #   entity_id: sensor.stock_quote_apple
  #   on_value:
  #     then:
  #       - logger.log: "received Apple stock quote"
  # - platform: homeassistant
  #   id: shopify_stock
  #   entity_id: sensor.stock_quote_shopify
  #   on_value:
  #     then:
  #       - logger.log: "received Shopify stock quote"
  #       - script.execute: all_data_received
  - platform: homeassistant
    id: outdoor_temperature
    entity_id: sensor.home_weather_station_temp
    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - logger.log: "received value for home weather station temp."
  - platform: homeassistant
    id: living_room_temp
    entity_id: sensor.official_living_room_temp
    internal: true
    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - logger.log: "received value for living room temp."
  - platform: homeassistant
    id: downstairs_temp
    entity_id: sensor.official_downstairs_temp
    internal: true
    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - logger.log: "received value for downstairs temp."
  - platform: homeassistant
    id: extension_temp
    entity_id: sensor.official_extension_temp
    internal: true
    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - logger.log: "received value for extension temp."
  - platform: homeassistant
    id: parents_room_temp
    entity_id: sensor.official_parents_room_temp
    internal: true
    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - logger.log: "received value for parents room temp"
        - script.execute: all_data_received
  - platform: homeassistant
    id: weather_temperature
    entity_id: sensor.home_weather_station_temp
    on_value:
      then:
        - logger.log: "Received Weather Temp"
        - script.execute: all_data_received

display:
  - platform: lilygo_t5_47_display
    id: t5_display
    power_off_delay_enabled: true  
    clear: false
    update_interval: never
    pages:
      - id: page_white
        lambda: |-
          #define xres 960 
          #define yres 540
          it.filled_rectangle(0, 0, xres, yres, COLOR_OFF);
          it.print(xres/2, yres/2, id(font_name), COLOR_ON, TextAlign::CENTER, "Refreshing...");    
      - id: page_black
        lambda: |-
          #define xres 960 
          #define yres 540
          it.filled_rectangle(0, 0, xres, yres, COLOR_ON);
          it.print(xres/2, yres/2, id(font_name), COLOR_OFF, TextAlign::CENTER, "Refreshing...");     
      - id: page_sleep
        lambda: |-
          it.printf(10, 40, id(font_value), TextAlign::TOP_LEFT, "ZZZ zzz...");
      - id: page_temps
        lambda: |-          
          #define xres 960 
          #define yres 540
          #define gridsize 30
          #define x_pad gridsize*1.5 // border padding
          #define y_pad gridsize     // border padding      
          #define statux_x_pad 10
          #define status_y_pad 10

          // CONSTANTS for LEFT PORTION
          #define temps_center_x (x_pad+5.5*gridsize)
          #define temps_column_1_center_x (x_pad+((0.5+3.5/2)*gridsize))
          #define temps_column_2_center_x (x_pad+((6.5+3.5/2)*gridsize))
          #define level_1_header_center_y y_pad+(0.5*gridsize) 
          #define level_2_header_center_y y_pad+(7*gridsize)

          #define level_2_row_1_center_y       y_pad+9*gridsize
          #define level_2_row_1_label_center_y y_pad+11*gridsize
          #define level_2_row_2_center_y       y_pad+13*gridsize
          #define level_2_row_2_label_center_y y_pad+15*gridsize



          // CONSTANTS for RIGHT PORTION
          #define infotainment_center_x (xres - x_pad - (16/2*gridsize))
          #define info_column_1_center_x (17*gridsize+(5/2*gridsize))
          #define info_column_2_center_x (24*gridsize+(5/2*gridsize)) 
          #define info_column_row1_center_y (y_pad+3.5*gridsize)
          #define info_column_row1_label_baseline_y (y_pad+5.5*gridsize)
          #define level_1_full_width_sublabel_baseline_center_y (y_pad+3.75*gridsize)
          #define level_1_full_width_label_center_y (y_pad+4.5*gridsize)
          #define level_1_full_width_centered_single_label_y (y_pad+4*gridsize)

          //draw clear background (forces whole display to redraw)
          it.filled_rectangle(0, 0, xres, yres, COLOR_ON);
          it.filled_rectangle(1, 1, xres-1, yres-1, COLOR_OFF);

          // DEBUG STUFF
          it.line(x_pad, y_pad+1.5*gridsize, 13*gridsize, y_pad+1.5*gridsize);
          it.line(x_pad+13*gridsize, y_pad+1.5*gridsize, xres-x_pad, y_pad+1.5*gridsize);

          // WEATHER SECTION --------------

          // weather label
          it.print(temps_center_x, level_1_header_center_y, id(font_section_title), COLOR_ON, TextAlign::CENTER, "WEATHER");

          // draw temperature
          it.printf(x_pad+(5*gridsize), y_pad+gridsize*3, id(font_value), COLOR_ON, TextAlign::TOP_LEFT, "%0.1f °F", id(weather_temperature).state);

          // weather - icon
          if (id(weather_today_condition).has_state()) {
            std::map<std::string, std::string> weather_map { 
              { "cloudy", "\U000F0590" },              
              { "exceptional", "\U000F0F2F" },          
              { "fog", "\U000F0591" },                 
              { "hail", "\U000F0592" },                
              { "lightning", "\U000F0593" },            
              { "lightning_rainy", "\U000F067E" },      
              { "clear-night", "\U000F0594" },         
              { "partlycloudy", "\U000F0595" },         
              { "pouring", "\U000F0596"},             
              { "rainy", "\U000F0597" },                
              { "snowy", "\U000F0598" },               
              { "snowyrainy", "\U000F067F" },           
              { "sunny", "\U000F0599" },                  
              { "windy", "\U000F059D" },               
              { "windyvariant", "\U000F059E" }         
            };   
            it.printf(x_pad+(2*gridsize), (3*y_pad+2*gridsize), id(weather_font), COLOR_ON, TextAlign::CENTER, weather_map[id(weather_today_condition).state.c_str()].c_str());
          };

          // END WEATHER SECTION --------------

          // INDOOR SECTION

          // indoor section label
          it.print(temps_center_x, level_2_header_center_y, id(font_section_title), COLOR_ON, TextAlign::CENTER, "INDOOR");          
          
          it.printf(temps_column_1_center_x, level_2_row_1_center_y, id(font_small_value), COLOR_ON, TextAlign::CENTER, "%0.1f °F", id(living_room_temp).state);
          it.print(temps_column_1_center_x, level_2_row_1_label_center_y, id(font_small_label), COLOR_ON, TextAlign::BASELINE_CENTER, "LIVING ROOM");
          it.printf(temps_column_2_center_x, level_2_row_1_center_y, id(font_small_value), COLOR_ON, TextAlign::CENTER, "%0.1f °F", id(downstairs_temp).state);
          it.print(temps_column_2_center_x, level_2_row_1_label_center_y, id(font_small_label), COLOR_ON, TextAlign::BASELINE_CENTER, "DOWNSTAIRS");

          it.printf(temps_column_1_center_x, level_2_row_2_center_y, id(font_small_value), COLOR_ON, TextAlign::CENTER, "%0.1f °F", id(extension_temp).state);
          it.print(temps_column_1_center_x, level_2_row_2_label_center_y, id(font_small_label), COLOR_ON, TextAlign::BASELINE_CENTER, "REC ROOM");
          it.printf(temps_column_2_center_x, level_2_row_2_center_y, id(font_small_value), COLOR_ON, TextAlign::CENTER, "%0.1f °F", id(parents_room_temp).state);
          it.print(temps_column_2_center_x, level_2_row_2_label_center_y, id(font_small_label), COLOR_ON, TextAlign::BASELINE_CENTER, "PARENTS");

          // END INDOOR SECTION


          // BEGIN BOTTOM Section
          it.print(infotainment_center_x, level_1_header_center_y, id(font_section_title), COLOR_ON, TextAlign::CENTER, "NEXT EVENT");

          if (strlen(id(next_calendar_item_time).state.c_str()) > 0) {
            it.print(infotainment_center_x, level_1_full_width_sublabel_baseline_center_y, id(font_calendar_time_label), COLOR_ON, TextAlign::BASELINE_CENTER, id(next_calendar_item_time).state.c_str());
            it.print(infotainment_center_x, level_1_full_width_label_center_y, id(font_footer), COLOR_ON, TextAlign::CENTER, id(next_calendar_item_title).state.c_str());
          } else {
            it.print(infotainment_center_x, level_1_full_width_centered_single_label_y, id(font_footer), COLOR_ON, TextAlign::CENTER, id(next_calendar_item_title).state.c_str());
          }

          // END BOTTOM Section

          // BEGIN TRADING SECTION 

          // Info Section Label
          it.print(infotainment_center_x, level_2_header_center_y, id(font_section_title), COLOR_ON, TextAlign::CENTER, "TRADING");
         
          it.print(info_column_1_center_x, level_2_row_1_center_y, id(font_small_value), COLOR_ON, TextAlign::CENTER, id(disney_stock).state.c_str());
          it.print(info_column_1_center_x, level_2_row_1_label_center_y, id(font_small_label), COLOR_ON, TextAlign::BASELINE_CENTER, "DIS");
          it.printf(info_column_2_center_x, level_2_row_1_center_y, id(font_small_value), COLOR_ON, TextAlign::CENTER, "%0.2f", id(inr_exchange_rate).state);
          it.print(info_column_2_center_x, level_2_row_1_label_center_y, id(font_small_label), COLOR_ON, TextAlign::BASELINE_CENTER, "USD to INR");

          it.print(info_column_1_center_x, level_2_row_2_center_y, id(font_small_value), COLOR_ON, TextAlign::CENTER, id(dow_jones_index_delta).state.c_str());
          it.print(info_column_1_center_x, level_2_row_2_label_center_y, id(font_small_label), COLOR_ON, TextAlign::BASELINE_CENTER, "DOW");
          it.print(info_column_2_center_x, level_2_row_2_center_y, id(font_small_value), COLOR_ON, TextAlign::CENTER, id(nasdaq_index_delta).state.c_str());
          it.print(info_column_2_center_x, level_2_row_2_label_center_y, id(font_small_label), COLOR_ON, TextAlign::BASELINE_CENTER, "NASDAQ");

          // END TRADING SECTION

          // Footer
          it.filled_rectangle(0, yres-30, xres, yres);
          it.strftime(statux_x_pad, yres-status_y_pad/2, id(font_footer), COLOR_OFF, TextAlign::BASELINE_LEFT, "%A %d/%b/%Y", id(ntp).now());
          it.strftime(xres/2, yres-status_y_pad/2, id(font_footer), COLOR_OFF, TextAlign::BASELINE_CENTER, "Updated %H:%M", id(ntp).now());
          it.printf(xres-statux_x_pad, yres-status_y_pad/2, id(font_footer), COLOR_OFF, TextAlign::BASELINE_RIGHT, "%.2fV/%.0f%%", id(batt_volt).voltage->state, id(batt).state);

deep_sleep:
  run_duration: ${run_time} 
  sleep_duration: ${sleep_time}
  id: deep_sleep_1
  esp32_ext1_wakeup:
    pins: GPIO39
    mode: ALL_LOW          
